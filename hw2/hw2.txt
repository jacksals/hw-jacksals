1.  a) README.md is unmodified
	b) README.md is modified and fun_problem.txt is untracked
	c) Staged
	d) Modified
	e) README.md is staged and fun_problem.txt is modified. git checkout clears fun_problem.txt so the content is blank.
	f) The status of README.md is modified because it was previously unmodified, but we edited it by appending "Fancy git move" to it.
3.  1. A list of songs (strings). This would be ideal becuase each list would correlate to a particular playlist/album and the lists would be ordered by track number. Since the track number is given we could quickly find the song in that list based on its index.
	2. We would want to use a list of instructions steps (strings) because a list is ordered and we would want to follow the instructions for baking the cake in order.
	3. //possibly a map. key = file extension and value pairs are arrays of programs ()check if value pairs can be arrays// 

	We would want to use a set of programs (strings). Each set would correlate to a specific file extension and within the set we would have the programs. The set is ideal because order does not matter for the possible programs and no duplicate programs will be in the set.
	4. A set would be perfect for storing all the TV station identifications because order does not matter (rules out list) and there are no value pairs associated with the identifications (rules out map)
4.  a) I converted the for loop into sigma notation. I pulled out n and we know that the remaining series runs in theta(n^2) because it is one of the given series we learned about for runtimes. Then multiply that by the n that I pulled out and get theta(n^3). [n(n+1)]/2
	b) I drew my diagram to represent the two possible senarios that occur each time we iterate through the nested for loop. Either the if statement is satisfied or it isn't. If it isn't satisfied, nothing else happens so the runtime for just the if statement is constant, theta(1), but this if statement will be checked n^2 times as we run through the nested loop. Because i changes with every iteration of the outer loop, the if statement can only be satisfied for a maximum of one iteration. The four loop in this if statement will run in logn time and the for loop will be run n number of times as the inner for loop runs through n number of times. Thus, the answer is the total of the info which I previously mentioned, which is n*logn + n^2 which simplifies to theta(n^2).
	c) Each time the recursive function is called, we subtract 2. We can subtract 2 from n n/2 times to create a total of (n/2)+1 layers (+1 because we still need to check the if statement for n = 0 even though it won't satisfy the if statement.) Each time, the fuction is recursively called two times. From this info we can create a recursion tree which breaks off into two branches for each node. After each call we check an if statement that runs in constant time.....


	d) The loop goes through until it gets to 10 the first time. Once it hits 10, we enter the if statement and size is multiplied by 3/2 and the for loop will continue to increment and then resize when it hits the multiple of 10*3.5^i until we get to n. Thus it runs log3/2(n) times. I then converted this information into sigma notation. I pulled the 10 out and what's left is a geometric series. The sum of a geometric series can be found with the equation I wrote. I then simplified to get my answer of theta(n)--sorry don't know how to make theta symbol.
5. This code will reverse the order of the linked list. First the head node is put into funcA. The head node is not equal to null and head->next is not equal to node so we enter the if statement. The first line in the if statement recursively calls funcA until we get to the end of the linked list. Once we get to the end, the base case will be hit, returning NULL and we start to bubble up the recursive calls. The second to last value, 4, and the last value, 5, are sent into funcB. funcB begins to reverse the linked list by making 5->next = 4. Then 4->next is set to 3 and so on as the recursive calls continue to bubble up to the top.